{
  "Close": {
    "props": {
      "accessibleWhenDisabled": {
        "defaultValue": null,
        "description": "Indicates whether the element should be focusable even when it is\n[`disabled`](https://ariakit.org/reference/focusable#disabled).\n\nThis is important when discoverability is a concern. For example:\n\n> A toolbar in an editor contains a set of special smart paste functions\nthat are disabled when the clipboard is empty or when the function is not\napplicable to the current content of the clipboard. It could be helpful to\nkeep the disabled buttons focusable if the ability to discover their\nfunctionality is primarily via their presence on the toolbar.\n\nLearn more on [Focusability of disabled\ncontrols](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols).\n\nLive examples:\n- [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)",
        "name": "accessibleWhenDisabled",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "autoFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Automatically focuses the element upon mounting, similar to the native\n`autoFocus` prop. This addresses an issue where the element with the native\n`autoFocus` attribute might receive focus before React effects are\nexecuted.\n\nThe `autoFocus` prop can also be used with\n[Focusable](https://ariakit.org/components/focusable) elements within a\n[Dialog](https://ariakit.org/components/dialog) component, establishing the\ninitial focus as the dialog opens.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Warning on Dialog\n  hide](https://ariakit.org/examples/dialog-hide-warning)\n- [Dialog with React\n  Router](https://ariakit.org/examples/dialog-react-router)\n- [Nested Dialog](https://ariakit.org/examples/dialog-nested)",
        "name": "autoFocus",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          },
          {
            "fileName": "welcome-ui/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "clickOnEnter": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If set to `true`, pressing the enter key while this element is focused will\ntrigger a click on the element, regardless of whether it's a native button\nor not. If this prop is set to `false`, pressing enter will not initiate a\nclick.",
        "name": "clickOnEnter",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/command/command.d.ts",
          "name": "CommandOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/command/command.d.ts",
            "name": "CommandOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "clickOnSpace": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If set to `true`, pressing and releasing the space key while this element\nis focused will trigger a click on the element, regardless of whether it's\na native button or not. If this prop is set to `false`, space will not\ninitiate a click.",
        "name": "clickOnSpace",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/command/command.d.ts",
          "name": "CommandOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/command/command.d.ts",
            "name": "CommandOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines if the element is disabled. This sets the `aria-disabled`\nattribute accordingly, enabling support for all elements, including those\nthat don't support the native `disabled` attribute.\n\nThis feature can be combined with the\n[`accessibleWhenDisabled`](https://ariakit.org/reference/focusable#accessiblewhendisabled)\nprop to make disabled elements still accessible via keyboard.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Submenu](https://ariakit.org/examples/menu-nested)\n- [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)\n- [Context Menu](https://ariakit.org/examples/menu-context-menu)",
        "name": "disabled",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          },
          {
            "fileName": "packages/Button/dist/types/index.d.ts",
            "name": "ButtonOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "focusable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines if [Focusable](https://ariakit.org/components/focusable)\nfeatures should be active on non-native focusable elements.\n\n**Note**: This prop only turns off the additional features provided by the\n[`Focusable`](https://ariakit.org/reference/focusable) component.\nNon-native focusable elements will lose their focusability entirely.\nHowever, native focusable elements will retain their inherent focusability,\nbut without added features such as improved\n[`autoFocus`](https://ariakit.org/reference/focusable#autofocus),\n[`accessibleWhenDisabled`](https://ariakit.org/reference/focusable#accessiblewhendisabled),\n[`onFocusVisible`](https://ariakit.org/reference/focusable#onfocusvisible),\netc.",
        "name": "focusable",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isLoading": {
        "defaultValue": null,
        "description": "",
        "name": "isLoading",
        "parent": {
          "fileName": "packages/Button/dist/types/index.d.ts",
          "name": "ButtonOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Button/dist/types/index.d.ts",
            "name": "ButtonOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onFocusVisible": {
        "defaultValue": null,
        "description": "Custom event handler invoked when the element gains focus through keyboard\ninteraction or a key press occurs while the element is in focus. This is\nthe programmatic equivalent of the\n[`data-focus-visible`](https://ariakit.org/guide/styling#data-focus-visible)\nattribute.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Navigation Menubar](https://ariakit.org/examples/menubar-navigation)\n- [Custom Checkbox](https://ariakit.org/examples/checkbox-custom)",
        "name": "onFocusVisible",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "BivariantCallback<(event: SyntheticEvent<HTMLElement, Event>) => void>"
        }
      },
      "render": {
        "defaultValue": null,
        "description": "Allows the component to be rendered as a different HTML element or React\ncomponent. The value can be a React element or a function that takes in the\noriginal component props and gives back a React element with the props\nmerged.\n\nCheck out the [Composition](https://ariakit.org/guide/composition) guide\nfor more details.",
        "name": "render",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
          "name": "Options"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
            "name": "Options"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderProp<HTMLAttributes<any> & { ref?: Ref<any>; }> | ReactElement<any, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "RenderProp<HTMLAttributes<any> & { ref?: Ref<any>; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "shape": {
        "defaultValue": null,
        "description": "",
        "name": "shape",
        "parent": {
          "fileName": "packages/Button/dist/types/index.d.ts",
          "name": "ButtonOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Button/dist/types/index.d.ts",
            "name": "ButtonOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Shape",
          "value": [
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "packages/Button/dist/types/index.d.ts",
          "name": "ButtonOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Button/dist/types/index.d.ts",
            "name": "ButtonOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"xxs\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "store": {
        "defaultValue": null,
        "description": "Object returned by the\n[`useDialogStore`](https://ariakit.org/reference/use-dialog-store) hook. If\nnot provided, the closest [`Dialog`](https://ariakit.org/reference/dialog)\ncomponent's context will be used.",
        "name": "store",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog-dismiss.d.ts",
          "name": "DialogDismissOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog-dismiss.d.ts",
            "name": "DialogDismissOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogStore"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "packages/Button/dist/types/index.d.ts",
          "name": "ButtonOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Button/dist/types/index.d.ts",
            "name": "ButtonOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Variant",
          "value": [
            {
              "value": "\"disabled\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"tertiary\""
            },
            {
              "value": "\"primary-info\""
            },
            {
              "value": "\"secondary-info\""
            },
            {
              "value": "\"primary-success\""
            },
            {
              "value": "\"secondary-success\""
            },
            {
              "value": "\"ghost\""
            },
            {
              "value": "\"primary-warning\""
            },
            {
              "value": "\"secondary-warning\""
            },
            {
              "value": "\"primary-danger\""
            },
            {
              "value": "\"secondary-danger\""
            }
          ]
        }
      },
      "wrapElement": {
        "defaultValue": null,
        "description": "",
        "name": "wrapElement",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
          "name": "Options"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
            "name": "Options"
          }
        ],
        "required": false,
        "type": {
          "name": "WrapElement"
        }
      }
    }
  },
  "Content": {
    "props": {}
  },
  "Drawer": {
    "props": {
      "accessibleWhenDisabled": {
        "defaultValue": null,
        "description": "Indicates whether the element should be focusable even when it is\n[`disabled`](https://ariakit.org/reference/focusable#disabled).\n\nThis is important when discoverability is a concern. For example:\n\n> A toolbar in an editor contains a set of special smart paste functions\nthat are disabled when the clipboard is empty or when the function is not\napplicable to the current content of the clipboard. It could be helpful to\nkeep the disabled buttons focusable if the ability to discover their\nfunctionality is primarily via their presence on the toolbar.\n\nLearn more on [Focusability of disabled\ncontrols](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols).\n\nLive examples:\n- [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)",
        "name": "accessibleWhenDisabled",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "alwaysVisible": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the content element should remain visible even when the\n[`open`](https://ariakit.org/reference/disclosure-provider#open) state is\n`false`. If this prop is set to `true`, the `hidden` prop and the `display:\nnone` style will not be applied, unless explicitly set otherwise.\n\nThis prop is particularly useful when using third-party animation libraries\nsuch as Framer Motion or React Spring, where the element needs to be\nvisible for exit animations to work.\n\nLive examples:\n- [Dialog with Framer\n  Motion](https://ariakit.org/examples/dialog-framer-motion)\n- [Menu with Framer\n  Motion](https://ariakit.org/examples/menu-framer-motion)\n- [Tooltip with Framer\n  Motion](https://ariakit.org/examples/tooltip-framer-motion)\n- [Dialog with details &\n  summary](https://ariakit.org/examples/dialog-details)",
        "name": "alwaysVisible",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-content.d.ts",
          "name": "DisclosureContentOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-content.d.ts",
            "name": "DisclosureContentOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "autoFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Automatically focuses the element upon mounting, similar to the native\n`autoFocus` prop. This addresses an issue where the element with the native\n`autoFocus` attribute might receive focus before React effects are\nexecuted.\n\nThe `autoFocus` prop can also be used with\n[Focusable](https://ariakit.org/components/focusable) elements within a\n[Dialog](https://ariakit.org/components/dialog) component, establishing the\ninitial focus as the dialog opens.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Warning on Dialog\n  hide](https://ariakit.org/examples/dialog-hide-warning)\n- [Dialog with React\n  Router](https://ariakit.org/examples/dialog-react-router)\n- [Nested Dialog](https://ariakit.org/examples/dialog-nested)",
        "name": "autoFocus",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "autoFocusOnHide": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether an element outside of the dialog will be focused when\nthe dialog is hidden if another element hasn't been focused in the action\nof hiding the dialog (for example, by clicking or tabbing into another\ntabbable element outside of the dialog).\n\nBy default, this is usually the disclosure element. The\n[`finalFocus`](https://ariakit.org/reference/dialog#finalfocus) prop can be\nused to define a different element to be focused.\n\nLive examples:\n- [Dialog with Next.js App\n  Router](https://ariakit.org/examples/dialog-next-router)\n- [Sliding menu](https://ariakit.org/examples/menu-slide)",
        "name": "autoFocusOnHide",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BooleanOrCallback<HTMLElement>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "(arg: HTMLElement) => boolean",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "autoFocusOnShow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether an element inside the dialog will receive focus when the\ndialog is shown. By default, this is usually the first tabbable element in\nthe dialog or the dialog itself. The\n[`initialFocus`](https://ariakit.org/reference/dialog#initialfocus) prop\ncan be used to set a different element to receive focus.\n\nLive examples:\n- [Warning on Dialog\n  hide](https://ariakit.org/examples/dialog-hide-warning)\n- [Sliding Menu](https://ariakit.org/examples/menu-slide)\n- [Selection Popover](https://ariakit.org/examples/popover-selection)",
        "name": "autoFocusOnShow",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BooleanOrCallback<HTMLElement>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "(arg: HTMLElement) => boolean",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "backdrop": {
        "defaultValue": null,
        "description": "Determines whether there will be a backdrop behind the dialog. On modal\ndialogs, this is `true` by default. Besides a `boolean`, this prop can also\nbe a React component or JSX element that will be rendered as the backdrop.\n\n**Note**: If a custom component is used, it must [accept ref and spread all\nprops to its underlying DOM\nelement](https://ariakit.org/guide/composition#custom-components-must-be-open-for-extension),\nthe same way a native element would.\n\nLive examples:\n- [Animated Dialog](https://ariakit.org/examples/dialog-animated)\n- [Dialog with scrollable\n  backdrop](https://ariakit.org/examples/dialog-backdrop-scrollable)\n- [Dialog with Framer\n  Motion](https://ariakit.org/examples/dialog-framer-motion)\n- [Dialog with Menu](https://ariakit.org/examples/dialog-menu)\n- [Nested Dialog](https://ariakit.org/examples/dialog-nested)\n- [Dialog with Next.js App\n  Router](https://ariakit.org/examples/dialog-next-router)\n@example ```jsx\n<Dialog backdrop={<div className=\"backdrop\" />} />\n```",
        "name": "backdrop",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ReactElement<Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<...>> & { ...; }, string | JSXElementConstructor<...>> | ElementType<...>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "ReactElement<Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }, string | JSXElementConstructor<...>>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }, any>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "FunctionComponent<Pick<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof HTMLAttributes<HTMLDivElement>> & { ...; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines if the element is disabled. This sets the `aria-disabled`\nattribute accordingly, enabling support for all elements, including those\nthat don't support the native `disabled` attribute.\n\nThis feature can be combined with the\n[`accessibleWhenDisabled`](https://ariakit.org/reference/focusable#accessiblewhendisabled)\nprop to make disabled elements still accessible via keyboard.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Submenu](https://ariakit.org/examples/menu-nested)\n- [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)\n- [Context Menu](https://ariakit.org/examples/menu-context-menu)",
        "name": "disabled",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "finalFocus": {
        "defaultValue": null,
        "description": "Determines the element that will receive focus once the dialog is closed,\nprovided that no other element has been focused while the dialog was being\nhidden (e.g., by clicking or tabbing into another tabbable element outside\nof the dialog).\n- If\n  [`autoFocusOnHide`](https://ariakit.org/reference/dialog#autofocusonhide)\n  is set to `false`, this prop will have no effect.\n- If left unset, the element that was focused before the dialog was opened\n  will be focused again.",
        "name": "finalFocus",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLElement | RefObject<HTMLElement>",
          "value": [
            {
              "value": "HTMLElement",
              "description": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "fullComment": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "tags": {}
            },
            {
              "value": "RefObject<HTMLElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "focusable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines if [Focusable](https://ariakit.org/components/focusable)\nfeatures should be active on non-native focusable elements.\n\n**Note**: This prop only turns off the additional features provided by the\n[`Focusable`](https://ariakit.org/reference/focusable) component.\nNon-native focusable elements will lose their focusability entirely.\nHowever, native focusable elements will retain their inherent focusability,\nbut without added features such as improved\n[`autoFocus`](https://ariakit.org/reference/focusable#autofocus),\n[`accessibleWhenDisabled`](https://ariakit.org/reference/focusable#accessiblewhendisabled),\n[`onFocusVisible`](https://ariakit.org/reference/focusable#onfocusvisible),\netc.",
        "name": "focusable",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "getPersistentElements": {
        "defaultValue": null,
        "description": "When a dialog is open, the elements outside of it are disabled to prevent\ninteraction if the dialog is\n[`modal`](https://ariakit.org/reference/dialog#modal). For non-modal\ndialogs, interacting with elements outside the dialog prompts it to close.\n\nThis function allows you to return an iterable collection of elements that\nwill be considered as part of the dialog, thus excluding them from this\nbehavior.\n\n**Note**: The elements returned by this function must exist in the DOM when\nthe dialog opens.\n\nLive examples:\n- [Dialog with\n  React-Toastify](https://ariakit.org/examples/dialog-react-toastify)",
        "name": "getPersistentElements",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "() => Iterable<Element>"
        }
      },
      "hideOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines if the dialog will hide when the user presses the Escape key.\n\nThis prop can be either a boolean or a function that accepts an event as an\nargument and returns a boolean. The event object represents the keydown\nevent that initiated the hide action, which could be either a native\nkeyboard event or a React synthetic event.\n\n**Note**: When placing Ariakit dialogs inside third-party dialogs, using\n`event.stopPropagation()` within this function will stop the event from\nreaching the third-party dialog, closing only the Ariakit dialog.",
        "name": "hideOnEscape",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BooleanOrCallback<KeyboardEvent | React.KeyboardEvent<Element>>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "(arg: KeyboardEvent | React.KeyboardEvent<Element>) => boolean",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideOnInteractOutside": {
        "defaultValue": {
          "value": true
        },
        "description": "Determines if the dialog should hide when the user clicks or focuses on an\nelement outside the dialog.\n\nThis prop can be either a boolean or a function that takes an event as an\nargument and returns a boolean. The event object represents the event that\ntriggered the action, which could be a native event or a React synthetic\nevent of various types.\n\nLive examples:\n- [Selection Popover](https://ariakit.org/examples/popover-selection)",
        "name": "hideOnInteractOutside",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BooleanOrCallback<Event | SyntheticEvent<Element, Event>>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "(arg: Event | SyntheticEvent<Element, Event>) => boolean",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocus": {
        "defaultValue": null,
        "description": "Specifies the element that will receive focus when the dialog is first\nopened. It can be an `HTMLElement` or a `React.RefObject` with an\n`HTMLElement`.\n\nIf\n[`autoFocusOnShow`](https://ariakit.org/reference/dialog#autofocusonshow)\nis set to `false`, this prop will have no effect. If left unset, the dialog\nwill attempt to determine the initial focus element in the following order:\n1. A [Focusable](https://ariakit.org/components/focusable) element with an\n   [`autoFocus`](https://ariakit.org/reference/focusable#autofocus) prop.\n2. The first tabbable element inside the dialog.\n3. The first focusable element inside the dialog.\n4. The dialog element itself.",
        "name": "initialFocus",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLElement | RefObject<HTMLElement>",
          "value": [
            {
              "value": "HTMLElement",
              "description": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "fullComment": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "tags": {}
            },
            {
              "value": "RefObject<HTMLElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "modal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the dialog is modal. Modal dialogs have distinct states\nand behaviors:\n- The [`portal`](https://ariakit.org/reference/dialog#portal) and\n  [`preventBodyScroll`](https://ariakit.org/reference/dialog#preventbodyscroll)\n  props are set to `true`. They can still be manually set to `false`.\n- When using the [`Heading`](https://ariakit.org/reference/heading) or\n  [`DialogHeading`](https://ariakit.org/reference/dialog-heading)\n  components within the dialog, their level will be reset so they start\n  with `h1`.\n- A visually hidden dismiss button will be rendered if the\n  [`DialogDismiss`](https://ariakit.org/reference/dialog-dismiss) component\n  hasn't been used. This allows screen reader users to close the dialog.\n- When the dialog is open, element tree outside it will be inert.\n\nLive examples:\n- [Combobox with tabs](https://ariakit.org/examples/combobox-tabs)\n- [Dialog with details &\n  summary](https://ariakit.org/examples/dialog-details)\n- [Form with Select](https://ariakit.org/examples/form-select)\n- [Context menu](https://ariakit.org/examples/menu-context-menu)\n- [Responsive Popover](https://ariakit.org/examples/popover-responsive)",
        "name": "modal",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "This is an event handler prop triggered when the dialog's `close` event is\ndispatched. The `close` event is similar to the native dialog\n[`close`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event)\nevent. The only difference is that this event can be canceled with\n`event.preventDefault()`, which will prevent the dialog from hiding.\n\nIt's important to note that this event only fires when the dialog store's\n[`open`](https://ariakit.org/reference/use-dialog-store#open) state is set\nto `false`. If the controlled\n[`open`](https://ariakit.org/reference/dialog#open) prop value changes, or\nif the dialog's visibility is altered in any other way (such as unmounting\nthe dialog without adjusting the open state), this event won't be\ntriggered.\n\nLive examples:\n- [Dialog with scrollable\n  backdrop](https://ariakit.org/examples/dialog-backdrop-scrollable)\n- [Dialog with details &\n  summary](https://ariakit.org/examples/dialog-details)\n- [Warning on Dialog\n  hide](https://ariakit.org/examples/dialog-hide-warning)\n- [Dialog with Menu](https://ariakit.org/examples/dialog-menu)",
        "name": "onClose",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: Event) => void"
        }
      },
      "onFocusVisible": {
        "defaultValue": null,
        "description": "Custom event handler invoked when the element gains focus through keyboard\ninteraction or a key press occurs while the element is in focus. This is\nthe programmatic equivalent of the\n[`data-focus-visible`](https://ariakit.org/guide/styling#data-focus-visible)\nattribute.\n\n**Note**: For this prop to work, the\n[`focusable`](https://ariakit.org/reference/command#focusable) prop must be\nset to `true`, if it's not set by default.\n\nLive examples:\n- [Navigation Menubar](https://ariakit.org/examples/menubar-navigation)\n- [Custom Checkbox](https://ariakit.org/examples/checkbox-custom)",
        "name": "onFocusVisible",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
          "name": "FocusableOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/focusable/focusable.d.ts",
            "name": "FocusableOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "BivariantCallback<(event: SyntheticEvent<HTMLElement, Event>) => void>"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Controls the open state of the dialog. This is similar to the\n[`open`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open)\nattribute on native dialog elements.\n\nLive examples:\n- [Dialog with scrollable\n  backdrop](https://ariakit.org/examples/dialog-backdrop-scrollable)\n- [Dialog with details &\n  summary](https://ariakit.org/examples/dialog-details)\n- [Warning on Dialog\n  hide](https://ariakit.org/examples/dialog-hide-warning)\n- [Dialog with Menu](https://ariakit.org/examples/dialog-menu)",
        "name": "open",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "placement": {
        "defaultValue": {
          "value": "right"
        },
        "description": "",
        "name": "placement",
        "parent": {
          "fileName": "Drawer/src/index.tsx",
          "name": "DrawerOptions"
        },
        "declarations": [
          {
            "fileName": "Drawer/src/index.tsx",
            "name": "DrawerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Placement",
          "value": [
            {
              "value": "\"top\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"left\""
            }
          ]
        }
      },
      "portal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the element should be rendered as a React Portal.\n\nLive examples:\n- [Combobox with integrated\n  filter](https://ariakit.org/examples/combobox-filtering-integrated)\n- [Dialog with Menu](https://ariakit.org/examples/dialog-menu)\n- [Hovercard with keyboard\n  support](https://ariakit.org/examples/hovercard-disclosure)\n- [Menubar](https://ariakit.org/components/menubar)\n- [Standalone Popover](https://ariakit.org/examples/popover-standalone)\n- [Animated Select](https://ariakit.org/examples/select-animated)",
        "name": "portal",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
          "name": "PortalOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
            "name": "PortalOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "portalElement": {
        "defaultValue": null,
        "description": "An HTML element or a memoized callback function that returns an HTML\nelement to be used as the portal element. By default, the portal element\nwill be a `div` element appended to the `document.body`.\n\nLive examples:\n- [Navigation Menubar](https://ariakit.org/examples/menubar-navigation)\n@example ```jsx\nconst [portal, setPortal] = useState(null);\n\n<Portal portalElement={portal} />\n<div ref={setPortal} />\n```\n@example ```jsx\nconst getPortalElement = useCallback(() => {\n  const div = document.createElement(\"div\");\n  const portalRoot = document.getElementById(\"portal-root\");\n  portalRoot.appendChild(div);\n  return div;\n}, []);\n\n<Portal portalElement={getPortalElement} />\n```",
        "name": "portalElement",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
          "name": "PortalOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
            "name": "PortalOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLElement | ((element: HTMLElement) => HTMLElement)",
          "value": [
            {
              "value": "HTMLElement",
              "description": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "fullComment": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
              "tags": {}
            },
            {
              "value": "(element: HTMLElement) => HTMLElement",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "portalRef": {
        "defaultValue": null,
        "description": "`portalRef` is similar to `ref` but is scoped to the portal node. It's\nuseful when you need to be informed when the portal element is appended to\nthe DOM or removed from the DOM.\n\nLive examples:\n- [Form with Select](https://ariakit.org/examples/form-select)\n@example ```jsx\nconst [portalElement, setPortalElement] = useState(null);\n\n<Portal portalRef={setPortalElement} />\n```",
        "name": "portalRef",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
          "name": "PortalOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
            "name": "PortalOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefCallback<HTMLElement> | MutableRefObject<HTMLElement>",
          "value": [
            {
              "value": "RefCallback<HTMLElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "MutableRefObject<HTMLElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "preserveTabOrder": {
        "defaultValue": {
          "value": "false"
        },
        "description": "When enabled, `preserveTabOrder` will keep the DOM element's tab order the\nsame as the order in which the underlying\n[`Portal`](https://ariakit.org/reference/portal) component was mounted in\nthe React tree.\n\nIf the\n[`preserveTabOrderAnchor`](https://ariakit.org/reference/portal#preservetaborderanchor)\nprop is provided, the tab order will be preserved relative to that element.",
        "name": "preserveTabOrder",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
          "name": "PortalOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
            "name": "PortalOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "preserveTabOrderAnchor": {
        "defaultValue": null,
        "description": "An anchor element for maintaining the tab order when\n[`preserveTabOrder`](https://ariakit.org/reference/portal#preservetaborder)\nprop is enabled. The tab order will be kept relative to this element.\n\nBy default, the tab order is kept relative to the original location in the\nReact tree where the underlying\n[`Portal`](https://ariakit.org/reference/portal) component was mounted.\n@example ```jsx {18-20}\nconst [anchor, setAnchor] = useState(null);\n\n<button ref={setAnchor}>Order 0</button>\n<button>Order 2</button>\n\n// Rendered at the end of the document.\n<Portal>\n  <button>Order 5</button>\n</Portal>\n\n// Rendered at the end of the document, but the tab order is preserved.\n<Portal preserveTabOrder>\n  <button>Order 3</button>\n</Portal>\n\n// Rendered at the end of the document, but the tab order is preserved\n// relative to the anchor element.\n<Portal preserveTabOrder preserveTabOrderAnchor={anchor}>\n  <button>Order 1</button>\n</Portal>\n\n<button>Order 4</button>\n```",
        "name": "preserveTabOrderAnchor",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
          "name": "PortalOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/portal/portal.d.ts",
            "name": "PortalOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Element"
        }
      },
      "preventBodyScroll": {
        "defaultValue": null,
        "description": "Determines whether the body scrolling will be prevented when the dialog is\nshown. This is automatically set to `true` when the dialog is\n[`modal`](https://ariakit.org/reference/dialog#modal). You can disable this\nprop if you want to implement your own logic.",
        "name": "preventBodyScroll",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "render": {
        "defaultValue": null,
        "description": "Allows the component to be rendered as a different HTML element or React\ncomponent. The value can be a React element or a function that takes in the\noriginal component props and gives back a React element with the props\nmerged.\n\nCheck out the [Composition](https://ariakit.org/guide/composition) guide\nfor more details.",
        "name": "render",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
          "name": "Options"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
            "name": "Options"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | RenderProp<HTMLAttributes<any> & { ref?: Ref<any>; }>",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "RenderProp<HTMLAttributes<any> & { ref?: Ref<any>; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "lg"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "Drawer/src/index.tsx",
          "name": "DrawerOptions"
        },
        "declarations": [
          {
            "fileName": "Drawer/src/index.tsx",
            "name": "DrawerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "store": {
        "defaultValue": null,
        "description": "Object returned by the\n[`useDialogStore`](https://ariakit.org/reference/use-dialog-store) hook. If\nnot provided, the closest\n[`DialogProvider`](https://ariakit.org/reference/dialog-provider)\ncomponent's context will be used. Otherwise, an internal store will be\ncreated.",
        "name": "store",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
          "name": "DialogOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/dialog/dialog.d.ts",
            "name": "DialogOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogStore"
        }
      },
      "unmountOnHide": {
        "defaultValue": {
          "value": "false"
        },
        "description": "When set to `true`, the content element will be unmounted and removed from\nthe DOM when it's hidden.\n\nLive examples:\n- [Navigation Menubar](https://ariakit.org/examples/menubar-navigation)\n- [Combobox with integrated\n  filter](https://ariakit.org/examples/combobox-filtering-integrated)\n- [Textarea with inline\n  Combobox](https://ariakit.org/examples/combobox-textarea)\n- [Standalone Popover](https://ariakit.org/examples/popover-standalone)\n- [Animated Select](https://ariakit.org/examples/select-animated)\n- [Multi-Select](https://ariakit.org/examples/select-multiple)",
        "name": "unmountOnHide",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-content.d.ts",
          "name": "DisclosureContentOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-content.d.ts",
            "name": "DisclosureContentOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "withBackdrop": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "withBackdrop",
        "parent": {
          "fileName": "Drawer/src/index.tsx",
          "name": "DrawerOptions"
        },
        "declarations": [
          {
            "fileName": "Drawer/src/index.tsx",
            "name": "DrawerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "withCloseButton": {
        "defaultValue": {
          "value": true
        },
        "description": "",
        "name": "withCloseButton",
        "parent": {
          "fileName": "Drawer/src/index.tsx",
          "name": "DrawerOptions"
        },
        "declarations": [
          {
            "fileName": "Drawer/src/index.tsx",
            "name": "DrawerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "wrapElement": {
        "defaultValue": null,
        "description": "",
        "name": "wrapElement",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
          "name": "Options"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/utils/types.d.ts",
            "name": "Options"
          }
        ],
        "required": false,
        "type": {
          "name": "WrapElement"
        }
      }
    }
  },
  "Drawer.Backdrop": {
    "props": {
      "hideOnInteractOutside": {
        "defaultValue": {
          "value": true
        },
        "description": "",
        "name": "hideOnInteractOutside",
        "parent": {
          "fileName": "Drawer/src/index.tsx",
          "name": "DrawerBackdropOptions"
        },
        "declarations": [
          {
            "fileName": "Drawer/src/index.tsx",
            "name": "DrawerBackdropOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  "Footer": {
    "props": {}
  },
  "Title": {
    "props": {
      "lines": {
        "defaultValue": null,
        "description": "",
        "name": "lines",
        "parent": {
          "fileName": "packages/Text/dist/types/index.d.ts",
          "name": "TextOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Text/dist/types/index.d.ts",
            "name": "TextOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "packages/Text/dist/types/index.d.ts",
          "name": "TextOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Text/dist/types/index.d.ts",
            "name": "TextOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"h0\" | \"lg\" | \"md\" | \"sm\" | \"xs\" | \"subtitle-md\" | \"subtitle-sm\"",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"h0\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"subtitle-md\""
            },
            {
              "value": "\"subtitle-sm\""
            }
          ]
        }
      },
      "withDash": {
        "defaultValue": null,
        "description": "",
        "name": "withDash",
        "parent": {
          "fileName": "packages/Text/dist/types/index.d.ts",
          "name": "TextOptions"
        },
        "declarations": [
          {
            "fileName": "packages/Text/dist/types/index.d.ts",
            "name": "TextOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  "Trigger": {
    "props": {}
  },
  "useDrawer": {
    "props": {
      "animated": {
        "defaultValue": null,
        "description": "Determines whether the content should animate when it is shown or hidden.\n- If `true`, the `animating` state will be `true` when the content is shown\n  or hidden and it will wait for a CSS animation/transition to end before\n  becoming `false`.\n- If it's set to a number, the `animating` state will be `true` when the\n  content is shown or hidden and it will wait for the number of\n  milliseconds to pass before becoming `false`.\n@deprecated Manually setting the `animated` prop is no longer necessary.\nThis will be removed in a future release.",
        "name": "animated",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/core/cjs/disclosure/disclosure-store.d.ts",
          "name": "DisclosureStoreOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/core/cjs/disclosure/disclosure-store.d.ts",
            "name": "DisclosureStoreOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | boolean",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the content should be visible by default.",
        "name": "defaultOpen",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/core/cjs/disclosure/disclosure-store.d.ts",
          "name": "DisclosureStoreOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/core/cjs/disclosure/disclosure-store.d.ts",
            "name": "DisclosureStoreOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disclosure": {
        "defaultValue": null,
        "description": "A reference to another disclosure store that controls another disclosure\ncomponent to keep them in sync. Element states like `contentElement` and\n`disclosureElement` won't be synced. For that, use the\n[`store`](https://ariakit.org/reference/disclosure-provider#store) prop\ninstead.\n\nLive examples:\n- [Command Menu](https://ariakit.org/examples/dialog-combobox-command-menu)",
        "name": "disclosure",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
          "name": "DisclosureStoreOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
            "name": "DisclosureStoreOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "DisclosureStore"
        }
      },
      "setMounted": {
        "defaultValue": null,
        "description": "A callback that gets called when the `mounted` state changes.\n@example const [mounted, setMounted] = useState(false);\nconst disclosure = useDisclosureStore({ setMounted });",
        "name": "setMounted",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
          "name": "DisclosureStoreOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
            "name": "DisclosureStoreOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(mounted: boolean) => void"
        }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "A callback that gets called when the\n[`open`](https://ariakit.org/reference/disclosure-provider#open) state\nchanges.\n@example const [open, setOpen] = useState(false);\nconst disclosure = useDisclosureStore({ open, setOpen });",
        "name": "setOpen",
        "parent": {
          "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
          "name": "DisclosureStoreOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/node_modules/@ariakit/react-core/cjs/disclosure/disclosure-store.d.ts",
            "name": "DisclosureStoreOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(open: boolean) => void"
        }
      }
    }
  }
}
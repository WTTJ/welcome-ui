@layer components {
  .root {
    /* VARIABLES FROM THEME - DONT CHANGE WITH REACT PROPS */
    position: relative;
    display: block;
    transition-property: all;
    transition-duration: var(--duration-medium);
    transition-timing-function: var(--timing-primary);
    border-radius: var(--components-dimensions-toggle-track-size-height-sm);
    border-style: solid;
    border-width: var(--components-dimensions-toggle-thumb-border-width);
    outline: none !important; /* important for firefox */
    cursor: pointer;

    /* VARIABLES THAT CHANGE WITH REACT PROPS */
    background-color: var(
      --toggle-background-color,
      (--components-colors-toggle-track-color-background-unchecked-default)
    );
    border-color: var(
      --toggle-border-color,
      var(--components-colors-toggle-track-color-border-unchecked-default)
    );
    height: var(--toggle-height);
    width: var(--toggle-width);
    box-shadow:
      var(--box-shadow-color, transparent) 0px 0px 0px var(--box-shadow-size, 0px),
      var(--box-shadow-inset, var(--inset-5)) inset;

    &::after {
      border-radius: var(--components-dimensions-toggle-track-border-radius);
      border-style: solid;
      border-width: var(--components-dimensions-toggle-thumb-border-width);
      content: '';
      top: 0;
      bottom: 0;
      left: var(--spacing-xxs);
      position: absolute;
      margin: auto;
      z-index: 1;
      transition-property: all;
      transition-duration: var(--duration-medium);
      transition-timing-function: var(--timing-primary);

      /* VARIABLES THAT CHANGE WITH REACT PROPS */
      background-color: var(
        --toggle-after-background-color,
        var(--components-colors-toggle-thumb-color-background-default)
      );
      border-color: var(
        --toggle-after-border-color,
        var(--components-colors-toggle-thumb-color-border-default)
      );
      height: var(--toggle-after-height);
      width: var(--toggle-after-height);
    }

    &[data-focus-visible],
    &:focus-visible {
      --box-shadow-color: var(--components-colors-toggle-track-color-background-checked-hover);
      --box-shadow-size: var(--components-dimensions-toggle-track-border-width-focused);
      --box-shadow-inset: var(--inset-10);
    }

    &:hover {
      &:not(:disabled) {
        --toggle-border-color: var(--components-colors-toggle-track-color-border-unchecked-hover);
        --box-shadow-inset: var(--inset-10);
      }
    }

    &:disabled {
      cursor: not-allowed;

      --toggle-background-color: var(--components-colors-toggle-track-color-background-disabled);
      --toggle-border-color: var(--components-colors-toggle-track-color-border-disabled);
      --toggle-after-background-color: var(
        --components-colors-toggle-thumb-color-background-disabled
      );
      --toggle-after-border-color: var(--components-colors-toggle-thumb-color-background-disabled);
    }

    &[aria-checked='true'] {
      &::after {
        /* border + left padding + right padding */
        --toggle-computed-width: calc(var(--toggle-width) - 100% - 0.3rem);
        transform: translateX(var(--toggle-computed-width));
      }

      &:not(:disabled) {
        --toggle-background-color: var(
          --components-colors-toggle-track-color-background-checked-default
        );
        --toggle-border-color: var(
          --components-colors-toggle-track-color-background-checked-default
        );
        --toggle-after-border-color: var(
          --components-colors-toggle-track-color-border-checked-default
        );

        &:hover {
          --toggle-background-color: var(
            --components-colors-toggle-track-color-background-checked-hover
          );
          --toggle-border-color: var(
            --components-colors-toggle-track-color-background-checked-hover
          );

          &::after {
            --toggle-after-border-color: var(
              --components-colors-toggle-track-color-border-checked-hover
            );
          }
        }
      }
    }
  }

  .size {
    &-sm {
      --toggle-width: var(--components-dimensions-toggle-track-size-width-sm);
      --toggle-height: var(--components-dimensions-toggle-track-size-height-sm);
      --toggle-after-height: var(--components-dimensions-toggle-thumb-size-sm);
      --toggle-icon-size: var(--components-dimensions-toggle-track-size-icon-sm);
    }

    &-md {
      --toggle-width: var(--components-dimensions-toggle-track-size-width-md);
      --toggle-height: var(--components-dimensions-toggle-track-size-height-md);
      --toggle-after-height: var(--components-dimensions-toggle-thumb-size-md);
      --toggle-icon-size: var(--components-dimensions-toggle-track-size-icon-md);
    }

    &-lg {
      --toggle-width: var(--components-dimensions-toggle-track-size-width-lg);
      --toggle-height: var(--components-dimensions-toggle-track-size-height-lg);
      --toggle-after-height: var(--components-dimensions-toggle-thumb-size-lg);
      --toggle-icon-size: var(--components-dimensions-toggle-track-size-icon-lg);
    }
  }

  .wrapper {
    position: relative;
    display: inline-block;
    cursor: pointer;
    flex-shrink: 0;
  }

  .icon-wrapper {
    position: absolute;
    z-index: 1;
    display: flex;
    align-items: center;
    bottom: var(--spacing-xs);
    right: var(--spacing-xs);

    svg {
      /* VARIABLES THAT CHANGE WITH REACT PROPS */
      width: var(--toggle-icon-size);
      height: var(--toggle-icon-size);
      color: var(--toggle-icon-color, var(--components-colors-toggle-track-color-icon-default));
    }

    &.checked {
      right: 0;
      left: var(--spacing-xs);
    }

    &.disabled {
      --toggle-icon-color: var(--components-colors-toggle-track-color-icon-disabled);
    }
  }
}

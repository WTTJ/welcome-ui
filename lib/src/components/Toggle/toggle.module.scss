@layer components {
  .root {
    /* VARIABLES FROM THEME - DONT CHANGE WITH REACT PROPS */
    position: relative;
    display: block;
    transition-property: all;
    transition-duration: var(--duration-medium);
    transition-timing-function: var(--timing-primary);
    border-radius: var(--components-dimensions-toggle-track-size-height-sm);
    border-style: solid;
    border-width: var(--components-dimensions-toggle-thumb-border-width);
    outline: none !important; /* important for firefox */
    cursor: pointer;

    /* VARIABLES THAT CHANGE WITH REACT PROPS */
    background-color: var(
      --toggleBackgroundColor,
      (--components-colors-toggle-track-color-background-unchecked-default)
    );
    border-color: var(
      --toggleBorderColor,
      var(--components-colors-toggle-track-color-border-unchecked-default)
    );
    height: var(--toggleHeight);
    width: var(--toggleWidth);
    box-shadow:
      var(--boxShadowColor, transparent) 0 0 0 var(--boxShadowSize, 0),
      var(--boxShadowInset, var(--inset-5)) inset;

    &::after {
      border-radius: var(--components-dimensions-toggle-track-border-radius);
      border-style: solid;
      border-width: var(--components-dimensions-toggle-thumb-border-width);
      content: '';
      top: 0;
      bottom: 0;
      left: var(--spacing-xxs);
      position: absolute;
      margin: auto;
      z-index: 1;
      transition-property: all;
      transition-duration: var(--duration-medium);
      transition-timing-function: var(--timing-primary);

      /* VARIABLES THAT CHANGE WITH REACT PROPS */
      background-color: var(
        --toggleAfterBackgroundColor,
        var(--components-colors-toggle-thumb-color-background-default)
      );
      border-color: var(
        --toggleAfterBorderColor,
        var(--components-colors-toggle-thumb-color-border-default)
      );
      height: var(--toggleAfterHeight);
      width: var(--toggleAfterHeight);
    }

    &[data-focus-visible],
    &:focus-visible {
      --boxShadowColor: var(--components-colors-toggle-track-color-background-checked-hover);
      --boxShadowSize: var(--components-dimensions-toggle-track-border-width-focused);
      --boxShadowInset: var(--inset-10);
    }

    &:hover {
      &:not(:disabled) {
        --toggleBorderColor: var(--components-colors-toggle-track-color-border-unchecked-hover);
        --boxShadowInset: var(--inset-10);
      }
    }

    &:disabled {
      cursor: not-allowed;

      --toggleBackgroundColor: var(--components-colors-toggle-track-color-background-disabled);
      --toggleBorderColor: var(--components-colors-toggle-track-color-border-disabled);
      --toggleAfterBackgroundColor: var(--components-colors-toggle-thumb-color-background-disabled);
      --toggleAfterBorderColor: var(--components-colors-toggle-thumb-color-background-disabled);
    }

    &[aria-checked='true'] {
      &::after {
        /* border + left padding + right padding */
        --toggleComputedWidth: calc(var(--toggleWidth) - 100% - 0.3rem);
        transform: translateX(var(--toggleComputedWidth));
      }

      &:not(:disabled) {
        --toggleBackgroundColor: var(
          --components-colors-toggle-track-color-background-checked-default
        );
        --toggleBorderColor: var(--components-colors-toggle-track-color-background-checked-default);
        --toggleAfterBorderColor: var(
          --components-colors-toggle-track-color-border-checked-default
        );

        &:hover {
          --toggleBackgroundColor: var(
            --components-colors-toggle-track-color-background-checked-hover
          );
          --toggleBorderColor: var(--components-colors-toggle-track-color-background-checked-hover);

          &::after {
            --toggleAfterBorderColor: var(
              --components-colors-toggle-track-color-border-checked-hover
            );
          }
        }
      }
    }
  }

  .size {
    &-sm {
      --toggleWidth: var(--components-dimensions-toggle-track-size-width-sm);
      --toggleHeight: var(--components-dimensions-toggle-track-size-height-sm);
      --toggleAfterHeight: var(--components-dimensions-toggle-thumb-size-sm);
      --toggleIconSize: var(--components-dimensions-toggle-track-size-icon-sm);
    }

    &-md {
      --toggleWidth: var(--components-dimensions-toggle-track-size-width-md);
      --toggleHeight: var(--components-dimensions-toggle-track-size-height-md);
      --toggleAfterHeight: var(--components-dimensions-toggle-thumb-size-md);
      --toggleIconSize: var(--components-dimensions-toggle-track-size-icon-md);
    }

    &-lg {
      --toggleWidth: var(--components-dimensions-toggle-track-size-width-lg);
      --toggleHeight: var(--components-dimensions-toggle-track-size-height-lg);
      --toggleAfterHeight: var(--components-dimensions-toggle-thumb-size-lg);
      --toggleIconSize: var(--components-dimensions-toggle-track-size-icon-lg);
    }
  }

  .wrapper {
    position: relative;
    display: inline-block;
    cursor: pointer;
    flex-shrink: 0;
  }

  .icon-wrapper {
    position: absolute;
    z-index: 1;
    display: flex;
    align-items: center;
    bottom: var(--spacing-xs);
    right: var(--spacing-xs);

    svg {
      /* VARIABLES THAT CHANGE WITH REACT PROPS */
      width: var(--toggleIconSize);
      height: var(--toggleIconSize);
      color: var(--toggleIconColor, var(--components-colors-toggle-track-color-icon-default));
    }

    &.checked {
      right: 0;
      left: var(--spacing-xs);
    }

    &.disabled {
      --toggleIconColor: var(--components-colors-toggle-track-color-icon-disabled);
    }
  }
}

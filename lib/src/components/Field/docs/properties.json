{
  "Field": {
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disabledIcon": {
        "defaultValue": null,
        "description": "",
        "name": "disabledIcon",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideLabel": {
        "defaultValue": null,
        "description": "",
        "name": "hideLabel",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hint": {
        "defaultValue": null,
        "description": "",
        "name": "hint",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hintProps": {
        "defaultValue": null,
        "description": "",
        "name": "hintProps",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "HintProps"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "If true, the field will be displayed inline (horizontally) instead of block (vertically).",
        "name": "inline",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "",
        "name": "labelProps",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "LabelProps"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "transparent": {
        "defaultValue": null,
        "description": "",
        "name": "transparent",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
          "name": "FieldOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/Field/index.tsx",
            "name": "FieldOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  }
}
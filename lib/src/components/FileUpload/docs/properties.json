{
  "FileUpload": {
    "props": {
      "accept": {
        "defaultValue": {
          "value": "*/*"
        },
        "description": "Pass a comma-separated string of file types e.g. \"image/png\" or \"image/png,image/jpeg\"",
        "name": "accept",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "handleAddFile": {
        "defaultValue": null,
        "description": "",
        "name": "handleAddFile",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((files: FileWithPreviewType | FileWithPreviewType[]) => void)",
          "value": [
            {
              "value": "(files: FileWithPreviewType | FileWithPreviewType[]) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "handleRemoveFile": {
        "defaultValue": null,
        "description": "",
        "name": "handleRemoveFile",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HandleRemoveType",
          "value": [
            {
              "value": "HandleRemoveType",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "maxSize": {
        "defaultValue": {
          "value": 2000000
        },
        "description": "",
        "name": "maxSize",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: { preventDefault: () => void; target: Record<string, unknown>; }) => void)",
          "value": [
            {
              "value": "(event: { preventDefault: () => void; target: Record<string, unknown>; }) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "preview": {
        "defaultValue": null,
        "description": "",
        "name": "preview",
        "parent": {
          "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
          "name": "FileUploadOptions"
        },
        "declarations": [
          {
            "fileName": "welcome-ui/lib/src/components/FileUpload/index.tsx",
            "name": "FileUploadOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FC<FileUploadPreviewProps>",
          "value": [
            {
              "value": "FC<FileUploadPreviewProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      }
    }
  }
}